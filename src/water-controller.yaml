###############################################################
# Water Controller â€” ESPHome (ESP8266 / ESP-12E)
#--------------------------------------------------------------
# Repo       : https://github.com/marcellogentile/Home-Assistant-Water-Controller
# Device     : water-controller
# Board      : esp8266 (esp12e)
# Purpose    : Dual water valves, dual flow meters (Digiten FL-408),
#              water leak binary sensor, status LED, Temp Sensor 
#              and aux outputs.
#
# Notes:
#  - All secrets (API key, OTA password, Wi-Fi creds, AP password)
#    are stored in secrets.yaml placeholders for safe versioning.
#  - Flow sensors use F = 7.5 * Q(L/min). We compute Q = F / 7.5.
#  - Integration sensors totalize consumption in liters and persist.
#
# Author     : Marcello Gentile <marcello@powercall.ca>
# Created    : 2025-08-26
# Modified   : 2025-08-26
###############################################################

substitutions:
  # ----------------- GPIO MAP -----------------
  VALVE1_PIN: "14"      # Water Cutoff Valve A
  VALVE2_PIN: "12"      # Water Cutoff Valve B
  SENSOR1_PIN: "13"     # Flow Sensor A (Digiten FL-408)
  SENSOR2_PIN: "5"      # Flow Sensor B (Digiten FL-408)
  AUX1_PIN: "0"         # Air Damper
  AUX2_PIN: "2"         # Alarm Trigger
  WTR_PIN: "16"         # Water Leak Detector (GRI 2500/2600)
  STATUS_LED_PIN: "15"  # Status LED
  TEMP_SENSOR_PIN: "4"  # Temp probe (DSB18B20)
  # --------------- OTHER SETTINGS -------------
  DEVICE_NAME: "water-controller"
  FRIENDLY_NAME: "Water Controller"
  UPDATE_INTERVAL_FLOW: "3s"  # flow meter update period
  PULSES_PER_L_PER_MIN: "7.5" # Digiten FL-408 constant

esphome:
  name: ${DEVICE_NAME}
  friendly_name: ${FRIENDLY_NAME}

esp8266:
  board: esp12e
  restore_from_flash: true

# Logging
logger:
  level: WARN

# Home Assistant API (encrypted)
api:
  encryption:
    key: !secret api_key_water_controller

# OTA (secured)
ota:
  - platform: esphome
    password: !secret ota_password_water_controller

# Wi-Fi
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Optional static IP for production
  # manual_ip:
  #   static_ip: 192.168.1.23
  #   gateway: 192.168.1.1
  #   subnet: 255.255.255.0

  # Fallback AP
  ap:
    ssid: "Water-Controller"
    password: !secret ap_password_water_controller

# Captive portal for fallback AP
captive_portal:

# --------------------- SWITCHES ---------------------
switch:
  - platform: gpio
    pin: ${VALVE1_PIN}
    name: "${FRIENDLY_NAME} - Water Cutoff Valve A"
    id: water_cutoff_valve_A

  - platform: gpio
    pin: ${VALVE2_PIN}
    name: "${FRIENDLY_NAME} - Water Cutoff Valve B"
    id: water_cutoff_valve_B

  - platform: gpio
    pin: ${AUX1_PIN}
    name: "${FRIENDLY_NAME} - Aux 1"
    id: air_damper

  - platform: gpio
    pin: ${AUX2_PIN}
    name: "${FRIENDLY_NAME} - Aux 2"
    id: alarm_trigger

  - platform: gpio
    pin: ${STATUS_LED_PIN}
    name: "${FRIENDLY_NAME} - LED Status"
    id: led_status

# --------------------- SENSORS ----------------------
sensor:
  # Flow A: pulse -> L/min
  - platform: pulse_counter
    id: water_flow_meter_A
    name: "${FRIENDLY_NAME} - Water Flow Rate A"
    pin: ${SENSOR1_PIN}
    update_interval: ${UPDATE_INTERVAL_FLOW}
    # rising_edge (default) works for most Digiten sensors; leave default
    filters:
      - lambda: |-
          // Q(L/min) = F / 7.5
          return (x / ${PULSES_PER_L_PER_MIN});
    unit_of_measurement: "L/min"
    accuracy_decimals: 2
    icon: "mdi:water"

  # Totalized water A (L)
  - platform: integration
    device_class: water
    state_class: total_increasing
    id: total_water_a
    name: "${FRIENDLY_NAME} - Water Consumption A"
    sensor: water_flow_meter_A
    time_unit: min
    unit_of_measurement: "L"
    accuracy_decimals: 2
    restore: true
    icon: "mdi:counter"

  # Flow B: pulse -> L/min
  - platform: pulse_counter
    id: water_flow_meter_B
    name: "${FRIENDLY_NAME} - Water Flow Rate B"
    pin: ${SENSOR2_PIN}
    update_interval: ${UPDATE_INTERVAL_FLOW}
    filters:
      - lambda: |-
          return (x / ${PULSES_PER_L_PER_MIN});
    unit_of_measurement: "L/min"
    accuracy_decimals: 2
    icon: "mdi:water"

  # Totalized water B (L)
  - platform: integration
    device_class: water
    state_class: total_increasing
    id: total_water_b
    name: "${FRIENDLY_NAME} - Water Consumption B"
    sensor: water_flow_meter_B
    time_unit: min
    unit_of_measurement: "L"
    accuracy_decimals: 2
    restore: true
    icon: "mdi:counter"

# --------------------- BUTTONS ----------------------
button:
  - platform: template
    name: "${FRIENDLY_NAME} - Reset Water Consumption A"
    id: reset_water_a
    on_press:
      - sensor.integration.reset: total_water_a

  - platform: template
    name: "${FRIENDLY_NAME} - Reset Water Consumption B"
    id: reset_water_b
    on_press:
      - sensor.integration.reset: total_water_b

# --------------- BINARY SENSORS (LEAK) --------------
binary_sensor:
  # GRI 2500 (NC) or 2600 (NO). Uncomment "invert:" for NO sensors if needed.
  - platform: gpio
    pin:
      number: ${WTR_PIN}
      mode:
        input: true
        pullup: false
    name: "${FRIENDLY_NAME} - Water Detected"
    id: water_detected
    filters:
      - delayed_on: 10ms
      - delayed_off: 10ms
      # - invert:
    on_state:
      then:
        - if:
            condition:
              binary_sensor.is_on: water_detected
            then:
              - switch.turn_on: water_cutoff_valve_A
              - switch.turn_on: water_cutoff_valve_B
              - switch.turn_on: led_status
            else:
              - switch.turn_off: water_cutoff_valve_A
              - switch.turn_off: water_cutoff_valve_B
              - switch.turn_off: led_status